<?php
// $Id$
/**
 * @file
 * Module for defining general states for usage in context
 * This module provides an admin page /admin/structure/states/define for administrators to add states and a separate admin page /admin/structure/states for editors to select the current state of the site.
 *
 * @author Evan Willhite, drupal.org uid: emwillhite
 * @date 11/14/2013
 *
 * Special thanks to Centresource and Micah Redding for assistance - drupal.org uid: micahredding
 */


/**
 * Implementation of hook_menu
 */
 function states_menu () {
  $items = array();

  $items['admin/structure/states'] = array(
    'title' => 'States',
    'description' => 'States UI',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('states_form'),
    'access arguments' => array('administer states'),
  );

  $items['admin/structure/states/define'] = array(
    'title' => 'Define States',
    'description' => 'Define States as an Administrator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('define_states_form'),
    'access arguments' => array('define states'),
  );

  return $items;
 }

/**
 * Implementation of hook_permission
 */
function states_permission() {
  return array(
    'define states' => array(
      'title' => t('Define States'),
      'description' => t('Define States as an Administrator'),
    ),
    'administer states' => array(
      'title' => t('Administer States'),
      'description' => t('Toggle the state(s) through the UI'),
    ),
  );
}

/**
 * Implementation of Forms API
 */
function define_states_form () {
  $form = array();

  $form['defined_states'] = array(
    '#type' => 'textarea',
    '#description' => t('Define the available states, one per line.'),
    '#default_value' => variable_get('defined_states', ''),
    '#title' => t('Defined States'),
  );

  $form['#submit'][] = 'define_states_submit';

  return system_settings_form($form);
}

function define_states_submit($form, &$form_state) {
  variable_set('defined_states', $form_state['values']['defined_states']);
}

function states_form () {
  // Get Defined States and parse into array
  $states = preg_split('/[\r\n]+/', variable_get('defined_states', ''), -1, PREG_SPLIT_NO_EMPTY);
    $form = array();

    $form['states'] = array(
      '#type' => 'fieldset',
      '#title' => t('Apply the following state(s):'),
    );
    // If states are defined
    if (!empty($states[0])) {
      foreach ($states as $key => &$value) {
        $form['states']['states_' . $key . ''] = array(
          '#type' => 'checkbox',
          '#default_value' => variable_get('states_' . $key),
          '#title' => t($value),
        );
      }

      $form['#submit'][] = 'states_submit';

      return system_settings_form($form);
    }
    else {
      $form['states']['no_state'] = array(
        '#type' => 'item',
        '#markup' => t('<em>No states have been defined</em>'),
      );

      return $form;
    }

}

function states_submit($form, &$form_state) {
  $i = 0;
  while(isset($form_state['values']['states_' . $i])) {
    variable_set('states_' . $i, $form_state['values']['states_' . $i]);
    $i++;
  }
}

/**
 *
 *
 * STATES CONTEXT (see API.txt in context module for more info)
 *
 */

/**
 * Implements hook_context_plugins().
 *
 */
function states_context_plugins() {
  $plugins = array();
  $plugins['states_context_condition_states'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'states'),
      'file' => 'states_context_condition_states.inc',
      'class' => 'states_context_condition_states',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 *
 */
function states_context_registry() {
  return array(
    'conditions' => array(
      'states' => array(
        'title' => t('States'),
        'description' => t('Apply state(s)'),
        'plugin' => 'states_context_condition_states',
      ),
    ),
  );
}
/**
 * Implements hook_init().
 *
 */
function states_init() {
  if ($plugin = context_get_plugin('condition', 'states')) {
    $states = explode("\n", variable_get('defined_states', ''));
    foreach ($states as $key => &$value) {
      $state = variable_get('states_' . $key);
      if ($state == 1) {
        $plugin->execute($key);
      }
    }
  }
}
